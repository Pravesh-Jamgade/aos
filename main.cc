#include<bits/stdc++.h>
#include<functional>
using namespace std;
#define vi vector<int>
#define fi first 
#define se second
#define pb push_back
#define pii pair<int,int>
#define ar array
#define MAX 1000
#define Edge pair<int,int>
#define EDGE(u,v) make_pair(u,v)//TODO check if works
typedef long long ll;

#include "graph.h"

// input format: 
// #nodes #edges #processors
// u v comm_cost
// node(i) p1 p2 p3 p4 .. pk (compute cost of processor pk on task i)

int main(){

	freopen("input.txt", "r", stdin);
	int nodes, edges, processor;
	cin >> nodes >> edges >> processor;

	Graph* g = new Graph(nodes, edges, processor);
	g->take_input();
	g->test();
	g->compute_parameter();


	return 0;
}

// ***********************************
// 1:2,3,4,
// 2:5,
// 3:5,6,7,
// 4:7,
// 5:8,
// 6:8,
// 7:9,
// 8:10,
// 9:10,
// 10:
// ***********************************
// 3,6,5,5,4,
// 6,3,5,7,3,
// 6,5,7,7,6,
// 5,6,4,4,4,
// 7,2,4,2,2,
// 6,7,4,6,5,
// 6,4,5,4,6,
// 6,6,5,5,6,
// 4,5,3,2,3,
// 3,1,7,1,2,
// ******************* <level> **********************
// 64,52,53,41,37,38,30,23,17,7,
// ******************* <ect> **********************
// 3,6,5,5,4,
// 9,9,10,12,7,
// 9,11,12,12,10,
// 8,12,9,9,8,
// 16,13,16,14,12,
// 15,18,16,18,15,
// 15,16,17,16,16,
// 22,24,21,23,21,
// 19,21,20,18,19,
// 25,25,28,24,23,
// ****************** <est> ***********************
// 0,0,0,0,0,
// 3,6,5,5,4,
// 3,6,5,5,4,
// 3,6,5,5,4,
// 9,11,12,12,10,
// 9,11,12,12,10,
// 9,12,12,12,10,
// 16,18,16,18,15,
// 15,16,17,16,16,
// 22,24,21,23,21,
// ******************** <fproc> *********************
// 1,5,3,4,2,
// 5,1,2,3,4,
// 1,5,2,3,4,
// 1,5,3,4,2,
// 5,2,4,1,3,
// 1,5,3,2,4,
// 1,2,4,5,3,
// 3,5,1,4,2,
// 4,1,5,3,2,
// 5,4,1,2,3,
// ******************** <cpred> *********************
// 0,1,1,1,3,3,3,6,7,8,
// ******************** <cpred> *********************
// 1:1,
// 2:1,2,
// 3:1,3,
// 4:1,4,
// 5:1,3,5,
// 6:1,3,6,
// 7:1,3,7,
// 8:1,3,6,8,
// 9:1,3,7,9,
// 10:1,3,6,8,10,
// ******************** <task_2_processor> *********************
// 4,2,3,4,5,-1,-1,-1,-1,-1,
// ******************** <processor_2_task> *********************
// 1,1,1,1,5,
// ******************** <t2p> *********************
// -1,4,2,3,4,-1,-1,-1,-1,-1,-1,


// -1,4,2,3,4,5,-1,-1,-1,-1,-1,

////
// 2,2,5,4,2,5,4,5,4,5,
// ******************** <processor_2_task> *********************
// -1,1,-1,1,1,